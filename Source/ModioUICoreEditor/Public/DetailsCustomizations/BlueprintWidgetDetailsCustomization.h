/*
 *  Copyright (C) 2024 mod.io Pty Ltd. <https://mod.io>
 *
 *  This file is part of the mod.io UE Plugin.
 *
 *  Distributed under the MIT License. (See accompanying file LICENSE or
 *   view online at <https://github.com/modio/modio-ue/blob/main/LICENSE>)
 *
 */

#pragma once
#include "Blueprint/WidgetBlueprintGeneratedClass.h"
#include "Components/Widget.h"
#include "Customizations/IBlueprintWidgetCustomizationExtender.h"
#include "DetailCategoryBuilder.h"
#include "DetailLayoutBuilder.h"
#include "Compat/MetadataCompat.h"
#include "UObject/MetaData.h"

namespace ModioUI
{

	class FModioBlueprintWidgetCustomizationExtender : public IBlueprintWidgetCustomizationExtender
	{
		virtual void CustomizeDetails(IDetailLayoutBuilder& InDetailLayout, const TArrayView<UWidget*> InWidgets,
									  const TSharedRef<FWidgetBlueprintEditor>& InWidgetBlueprintEditor) override
		{
			if (InWidgets.Num() != 1)
			{
				return;
			}
			UClass* WidgetClass = InWidgets[0]->GetClass();
			if (WidgetClass && WidgetClass->HasMetaDataHierarchical(FName("ModioWidget")))
			{
				InDetailLayout.SortCategories(IDetailLayoutBuilder::FOnCategorySortOrderFunction(
					[](const TMap<FName, IDetailCategoryBuilder*>& Categories) {
						if (IDetailCategoryBuilder* const* Builder = Categories.Find("mod.io"))
						{
							(*Builder)->SetSortOrder(0);
						}
					}));
			}
		}
	};

	class FModioWidgetBlueprintClassDetailsCustomization : public IDetailCustomization
	{
	protected:
		FText DirtyTextValue;
		bool bTextDirty = false;
		virtual void CustomizeDetails(IDetailLayoutBuilder& DetailLayout) override
		{
			TArray<TWeakObjectPtr<UObject>> ObjectsBeingCustomized;
			DetailLayout.GetObjectsBeingCustomized(ObjectsBeingCustomized);
			if (ObjectsBeingCustomized.Num() > 0)
			{
				TStrongObjectPtr<UWidgetBlueprint> AssociatedBlueprint {
					Cast<UWidgetBlueprint>(ObjectsBeingCustomized[0])};
				if (AssociatedBlueprint && AssociatedBlueprint->GeneratedClass &&
					AssociatedBlueprint->GeneratedClass->HasMetaDataHierarchical(FName("ModioWidget")))
				{
					auto ApplyCommentText = [ObjectBeingCustomized = AssociatedBlueprint,
											 this](const FText& NewText,
												   ETextCommit::Type CommitType = ETextCommit::Default) {
						if (ObjectBeingCustomized)
						{
							FScopedTransaction CommentSetTransaction =
								FScopedTransaction(TEXT("Comment Editor Commit"),
												   FText::FromString("Edit Blueprint Class Comment Metadata"),
												   ObjectBeingCustomized.Get());
							ObjectBeingCustomized->Modify();

							auto* BPMetadata = ModioUICoreEditorMetadataEngineCompat::GetMetaData(
								ObjectBeingCustomized->GetOutermost()->GetPackage());
							BPMetadata->SetValue(ObjectBeingCustomized.Get(), FName("Comment"), *NewText.ToString());

							bTextDirty = false;
							FBlueprintEditorUtils::MarkBlueprintAsModified(
								Cast<UBlueprint>(ObjectBeingCustomized.Get()));
						}
					};

					auto* BPMetadata = ModioUICoreEditorMetadataEngineCompat::GetMetaData(ObjectsBeingCustomized[0]
												->GetOutermost()
												->GetPackage());
					FString ExistingComment = BPMetadata->GetValue(ObjectsBeingCustomized[0].Get(), FName("Comment"));


					const FText ToolTip = FText::FromString("Edit the Comment metadata for this class");
					DetailLayout.EditCategory("Metadata")
						.AddCustomRow(FText::FromString("Comment"))
						.NameContent()[SNew(STextBlock)
										   .Font(DetailLayout.GetDetailFont())
										   .Text(FText::FromString("Comment"))
										   .ToolTipText(ToolTip)]
						.ValueContent()[SNew(SHorizontalBox) +
										SHorizontalBox::Slot()[SNew(SMultiLineEditableTextBox)
																   .Text(FText::FromString(ExistingComment))
																   .OnTextChanged_Lambda([this](const FText& InText) {
																	   DirtyTextValue = InText;
																	   bTextDirty = true;
																   })
																   .OnTextCommitted_Lambda(ApplyCommentText)] +
										SHorizontalBox::Slot()[SNew(SButton)
																   .Text(FText::FromString("Commit"))
																   .IsEnabled_Lambda([this]() { return bTextDirty; })
																   .OnClicked_Lambda([this, ApplyCommentText]() {
																	   ApplyCommentText(DirtyTextValue);
																	   return FReply::Handled();
																   })]];

					// need to get the class generated by from the owner for this property and then maybe get the
					// equivalent property from there maybe
					/*


									FString ExistingComment;
									FBlueprintEditorUtils::GetBlueprintVariableMetaData(Cast<UBlueprint>(AssociatedBlueprint.Get()),
																						VariablePropertyBeingCustomized->GetFName(),
																						nullptr, FName("Comment"),
					   ExistingComment); const FText ToolTip = FText::FromString("Edit the Comment metadata for the
					   selected member"); DetailLayout.EditCategory("Metadata")
										.AddCustomRow(FText::FromString("Comment"))
										.NameContent()[SNew(STextBlock)
														   .Font(DetailLayout.GetDetailFont())
														   .Text(FText::FromString("Comment"))
														   .ToolTipText(ToolTip)]
										.ValueContent()[SNew(SHorizontalBox) +
														SHorizontalBox::Slot()[SNew(SMultiLineEditableTextBox)
																				   .Text(FText::FromString(ExistingComment))
																				   .IsEnabled(!VariablePropertyBeingCustomized->IsNative())
																				   .OnTextChanged_Lambda([this](const
					   FText& InText) { DirtyTextValue = InText; bTextDirty = true;
																				   })
																				   .OnTextCommitted_Lambda(ApplyCommentText)]
					   + SHorizontalBox::Slot()[SNew(SButton) .Text(FText::FromString("Commit"))
																				   .IsEnabled_Lambda([this]() { return
					   bTextDirty; }) .OnClicked_Lambda([this, ApplyCommentText]() { ApplyCommentText(DirtyTextValue);
																					   return FReply::Handled();
																				   })]];*/
				}
			}
		}
	};

	TSharedPtr<IDetailCustomization> MakeBlueprintWidgetClassDetailsCustomization()
	{
		/*const TArray<UObject*>* Objects =
			(InBlueprintEditor.IsValid() ? InBlueprintEditor->GetObjectsCurrentlyBeingEdited() : nullptr);
		if (Objects && Objects->Num() == 1)
		{
			UWidgetBlueprint* Blueprint = Cast<UWidgetBlueprint>((*Objects)[0]);
			if (Blueprint == nullptr)
			{
				return nullptr;
			}
			if (Blueprint->GeneratedClass && Blueprint->GeneratedClass->HasMetaDataHierarchical(FName("ModioWidget")))
			{
				return MakeShareable(new FModioBlueprintWidgetMemberDetailsCustomization(Blueprint, Type));
			}
		}*/

		return nullptr;
	}
} // namespace ModioUI
