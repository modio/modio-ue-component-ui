/*
 *  Copyright (C) 2024 mod.io Pty Ltd. <https://mod.io>
 *
 *  This file is part of the mod.io UE Plugin.
 *
 *  Distributed under the MIT License. (See accompanying file LICENSE or
 *   view online at <https://github.com/modio/modio-ue/blob/main/LICENSE>)
 *
 */

#pragma once
#include "BlueprintEditorModule.h"
#include "Chaos/Array.h"
#include "DetailCategoryBuilder.h"
#include "DetailLayoutBuilder.h"
#include "DetailWidgetRow.h"
#include "IDetailCustomization.h"
#include "K2Node_FunctionEntry.h"
#include "Kismet2/BlueprintEditorUtils.h"
#include "Widgets/Input/SButton.h"
#include "ScopedTransaction.h"
#include "UObject/UnrealType.h"
#include "UObject/WeakObjectPtrTemplates.h"
#include "WidgetBlueprint.h"
#include "Widgets/Input/SCheckBox.h"
#include "Widgets/Input/SMultiLineEditableTextBox.h"
#include "Widgets/Text/STextBlock.h"

namespace ModioUI
{

	enum class EBlueprintWidgetMemberType
	{
		EBPM_Property,
		EBPM_Function
	};

	class FModioBlueprintWidgetMemberDetailsCustomization : public IDetailCustomization
	{
	protected:
		TWeakObjectPtr<UWidgetBlueprint> AssociatedBlueprint;
		/** The property we are editing */
		TWeakFieldPtr<FProperty> VariablePropertyBeingCustomized;

		TWeakObjectPtr<UK2Node_FunctionEntry> FunctionsBeingCustomized;

		ModioUI::EBlueprintWidgetMemberType Type;

		FText DirtyTextValue;
		bool bTextDirty = false;
		virtual void CustomizeDetails(IDetailLayoutBuilder& DetailLayout) override
		{
			switch (Type)
			{
				case ModioUI::EBlueprintWidgetMemberType::EBPM_Property:
					CustomizeVariable(DetailLayout);
					break;
				case ModioUI::EBlueprintWidgetMemberType::EBPM_Function:
					break;
			}
		}

		void CustomizeVariable(IDetailLayoutBuilder& DetailLayout)
		{
			TArray<TWeakObjectPtr<UObject>> ObjectsBeingCustomized;
			DetailLayout.GetObjectsBeingCustomized(ObjectsBeingCustomized);
			if (ObjectsBeingCustomized.Num() > 0)
			{
				for (TWeakObjectPtr<UObject>& Obj : ObjectsBeingCustomized)
				{
					UPropertyWrapper* PropertyWrapper = Cast<UPropertyWrapper>(Obj.Get());
					VariablePropertyBeingCustomized = PropertyWrapper ? PropertyWrapper->GetProperty() : nullptr;
					if (VariablePropertyBeingCustomized.IsValid())
					{
						// need to get the class generated by from the owner for this property and then maybe get the
						// equivalent property from there maybe

						auto ApplyCommentText = [ObjectBeingCustomized = AssociatedBlueprint,
												 CapturedVariablePropertyBeingCustomized = VariablePropertyBeingCustomized,
												 this](const FText& NewText,
													   ETextCommit::Type CommitType = ETextCommit::Default) {
							if (CapturedVariablePropertyBeingCustomized.IsValid())
							{
								TStrongObjectPtr<UObject> PinnedObject {ObjectBeingCustomized.Get()};
								if (PinnedObject)
								{
									FScopedTransaction CommentSetTransaction = FScopedTransaction(
										TEXT("Comment Editor Commit"),
										FText::FromString("Edit Blueprint Variable Comment Metadata"),
										PinnedObject.Get());
									PinnedObject->Modify();
									FBlueprintEditorUtils::SetBlueprintVariableMetaData(
										Cast<UBlueprint>(PinnedObject.Get()),
										CapturedVariablePropertyBeingCustomized->GetFName(), nullptr, FName("Comment"),
										*NewText.ToString());
									bTextDirty = false;
									FBlueprintEditorUtils::MarkBlueprintAsModified(
										Cast<UBlueprint>(PinnedObject.Get()));
								}
							}
						};
						FString ExistingComment;
						FBlueprintEditorUtils::GetBlueprintVariableMetaData(Cast<UBlueprint>(AssociatedBlueprint.Get()), VariablePropertyBeingCustomized->GetFName(),nullptr, FName("Comment"), ExistingComment);
						const FText ToolTip = FText::FromString("Edit the Comment metadata for the selected member");
						DetailLayout.EditCategory("Variable")
							.AddCustomRow(FText::FromString("Comment"))
							.NameContent()[SNew(STextBlock)
											   .Font(DetailLayout.GetDetailFont())
											   .Text(FText::FromString("Comment"))
											   .ToolTipText(ToolTip)]
							.ValueContent()
								[SNew(SHorizontalBox) +
								 SHorizontalBox::Slot()[SNew(SMultiLineEditableTextBox)
															.Text(FText::FromString(ExistingComment))
															.IsEnabled(!VariablePropertyBeingCustomized->IsNative())
															.OnTextChanged_Lambda([this](const FText& InText) {
							DirtyTextValue = InText;
							bTextDirty = true;
															})
															.OnTextCommitted_Lambda(ApplyCommentText)] +
								 SHorizontalBox::Slot()[SNew(SButton)
															.Text(FText::FromString("Commit"))
															.IsEnabled_Lambda([this]() {
							return bTextDirty; })
															.OnClicked_Lambda([this, ApplyCommentText]() {
							ApplyCommentText(DirtyTextValue);
							return FReply::Handled();
															})]];
					}
				}
			}
		}

	public:
		FModioBlueprintWidgetMemberDetailsCustomization(UWidgetBlueprint* InBlueprint,
														ModioUI::EBlueprintWidgetMemberType InType)
			: AssociatedBlueprint(InBlueprint),
			  Type(InType) {};
	};

	TSharedPtr<IDetailCustomization> MakeBlueprintWidgetMemberDetailsCustomization(
		TSharedPtr<IBlueprintEditor> InBlueprintEditor, EBlueprintWidgetMemberType Type)
	{
		const TArray<UObject*>* Objects =
			(InBlueprintEditor.IsValid() ? InBlueprintEditor->GetObjectsCurrentlyBeingEdited() : nullptr);
		if (Objects && Objects->Num() == 1)
		{
			UWidgetBlueprint* Blueprint = Cast<UWidgetBlueprint>((*Objects)[0]);
			if (Blueprint == nullptr)
			{
				return nullptr;
			}
			if (Blueprint->GeneratedClass && Blueprint->GeneratedClass->HasMetaDataHierarchical(FName("ModioWidget")))
			{
				return MakeShareable(new FModioBlueprintWidgetMemberDetailsCustomization(Blueprint, Type));
			}
		}

		return nullptr;
	}

} // namespace ModioUI
