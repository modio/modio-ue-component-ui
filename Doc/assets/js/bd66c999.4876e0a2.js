"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[8239],{87676:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var t=i(74848),o=i(28453);const r={id:"ue-principles",title:"Overview",slug:"/unreal/component-ui",custom_edit_url:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/overview.mdx"},s="Component UI Framework",a={id:"component-ui/ue-principles",title:"Overview",description:"Component UI for Unreal Engine provides a framework that lets you integrate mod.io plugin data and events into your game's UI. The following documentation will give you the tools to create a seamless UGC experience for your game.",source:"@site/public/en-us/component-ui/overview.mdx",sourceDirName:"component-ui",slug:"/unreal/component-ui",permalink:"/unreal/component-ui",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/overview.mdx",tags:[],version:"current",frontMatter:{id:"ue-principles",title:"Overview",slug:"/unreal/component-ui",custom_edit_url:"https://github.com/modio/modio-ue4-internal/tree/main/Plugins/ModioComponentUI/Doc/doc_root/en-us/component-ui/overview.mdx"},sidebar:"sidebar",previous:{title:"Home",permalink:"/"},next:{title:"Building a UGC Browser",permalink:"/unreal/component-ui/building-a-screen"}},l={},d=[{value:"List of Component UI Guides for Unreal Engine",id:"list-of-component-ui-guides-for-unreal-engine",level:3},{value:"UI framework for Unreal Engine",id:"ui-framework-for-unreal-engine",level:2},{value:"What&#39;s included",id:"whats-included",level:2},{value:"Design goals",id:"design-goals",level:2},{value:"Challenges",id:"challenges",level:2},{value:"Principles",id:"principles",level:2},{value:"Prefer interfaces over concrete types",id:"prefer-interfaces-over-concrete-types",level:3},{value:"Provide consistent behaviour for data binding",id:"provide-consistent-behaviour-for-data-binding",level:3},{value:"Emphasise flexibility and composability for widgets",id:"emphasise-flexibility-and-composability-for-widgets",level:3},{value:"Don&#39;t include styling as part of the public interface",id:"dont-include-styling-as-part-of-the-public-interface",level:3},{value:"Favor re-usable widgets over bespoke implementations",id:"favor-re-usable-widgets-over-bespoke-implementations",level:3},{value:"Next steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"component-ui-framework",children:"Component UI Framework"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://docs.mod.io/in-game-ui/component",children:"Component UI"})," for Unreal Engine provides a framework that lets you integrate mod.io plugin data and events into your game's UI. The following documentation will give you the tools to create a seamless UGC experience for your game."]}),"\n",(0,t.jsx)(n.admonition,{title:"Template UI",type:"note",children:(0,t.jsxs)(n.p,{children:["If you are after a ready-made UGC browser, ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://docs.mod.io/in-game-ui/template",children:"Template UI"})})," is a fully-featured UGC browser built using Component UI."]})}),"\n",(0,t.jsx)(n.h3,{id:"list-of-component-ui-guides-for-unreal-engine",children:"List of Component UI Guides for Unreal Engine"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/unreal/component-ui/",children:"Component UI Framework"})," < ",(0,t.jsx)(n.em,{children:"you are here"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/building-a-screen/",children:"Building a UGC Browser"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/substitute-components/",children:"Substituting Components"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/custom-components/",children:"Creating Custom Components"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/architecture/",children:"Detailed Framework Elements"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/localization/",children:"Localization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/helpers/",children:"Helper Functionality"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/enable-disable/",children:"Enable/Disable UGC"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/component-ui/gamepad-glyph-switching",children:"Gamepad Glyph Switching"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/unreal/ui-refdocs/",children:"Component UI API Reference"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ui-framework-for-unreal-engine",children:"UI framework for Unreal Engine"}),"\n",(0,t.jsx)(n.mermaid,{value:'block-beta\r\n    columns 4\r\n    ComponentUIPluginLabel["Component UI Plugin"]\r\n    block:ComponentUIPlugin:4\r\n        columns 1\r\n        block:TemplateGrp\r\n        columns 4\r\n            Template:1\r\n            ModioModBrowser\r\n            ModioModDetailsDialog\r\n            ModioFilterPanel\r\n        end\r\n        block:ComponentGrp\r\n        columns 4\r\n        UIComponents["UI Components"]:1\r\n            ModioDefaultButton\r\n            ModioDefaultImage\r\n            ModioDefaultModTile\r\n        end\r\n        ModioUISubsystem\r\n    end\r\n\r\n    CorePluginLabel["Core Plugin"]\r\n    block:CorePlugin:4\r\n        columns 1\r\n        ModioSubsystem\r\n        space\r\n        ModioSDK["Modio C++ SDK"]\r\n    end\r\nModioSubsystem--\x3eModioUISubsystem\r\nModioUISubsystem--\x3eModioSubsystem\r\nModioSDK---ModioSubsystem       \r\nModioSubsystem--\x3eModioSDK       \r\n\r\nstyle CorePluginLabel stroke:#07C1D8\r\nstyle ComponentUIPluginLabel stroke:#07C1D8\r\nstyle TemplateGrp stroke:#07C1D8, fill:#2f2f2f\r\nstyle Template stroke:#07C1D8\r\nstyle ComponentGrp stroke:#07C1D8, fill:#2f2f2f\r\nstyle UIComponents stroke:#07C1D8\r\nstyle CorePlugin stroke:#07C1D8, fill:#1d1d1f\r\nstyle ComponentUIPlugin stroke:#07C1D8, fill:#1d1d1f'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Of primary concern here is abstracting away as much plugin-specific code from the developer as possible while maintaining flexibility for developers to implement their UI in C++, UMG/Blueprint, or any combination of the two."})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#whats-included",children:"What's included"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#design-goals",children:"Design goals"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#challenges",children:"Challenges"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you are eager to get started, you can skip ahead to ",(0,t.jsx)(n.a,{href:"/unreal/component-ui/building-a-screen/",children:"Building a UGC Browser"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"whats-included",children:"What's included"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Components:"})," Default widget implementations conforming to the specifications and requirements of each component."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Interfaces:"})," A series of interfaces used for component-to-component communication, giving developers complete flexibility when creating custom component implementations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Infrastructure Classes and Helper Functions:"})," A UI-oriented subsystem and interface classes allowing widgets to register for plugin events, facilitating widgets that react to plugin events triggered externally."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Template Implementation:"})," A full-featured implementation of a mod browser, featuring discovery and installation management, that can be copied into your own project as a template for customization or used as a reference for a custom implementation."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"design-goals",children:"Design goals"}),"\n",(0,t.jsx)(n.p,{children:"The mod.io Component UI framework is intended to accelerate the process of building mod.io-aware UI elements (such as menus and widgets) within Unreal Engine, while providing developers with as much flexibility and modularity as possible. As a result, the framework has the following high-level goals:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Allow developers to implement their mod.io-connected UI exclusively in C++, exclusively in Blueprint, or any combination thereof."}),"\n",(0,t.jsx)(n.li,{children:"Allow developers complete control over the styling and layout of the associated widgets."}),"\n",(0,t.jsx)(n.li,{children:"Allow developers to re-use as much of their existing UI widgets and implementation as possible."}),"\n",(0,t.jsx)(n.li,{children:"Abstract communication with the mod.io plugin away as much as possible."}),"\n",(0,t.jsx)(n.li,{children:"Not require any engine-level changes to be made."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"challenges",children:"Challenges"}),"\n",(0,t.jsx)(n.p,{children:"Our goals pose a number of challenges as Slate and UMG make a number of assumptions and impose limitations which favor tightly-coupled UI classes. This hinders designer UX when C++ is not being utilized. When implementing a UI for a specific game, these assumptions may not pose an issue. However, due to the aforementioned design goals for our UI components, they bear specific consideration."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["UMG exposes all inner widgets marked as variables as ",(0,t.jsx)(n.code,{children:"public"})," ",(0,t.jsx)(n.code,{children:"UPROPERTY"})," on their outer ",(0,t.jsx)(n.code,{children:"UserWidget"}),". This violation of encapsulation encourages implementations to know about and directly communicate with internal widgets of other components, making widget substitutions difficult."]}),"\n",(0,t.jsxs)(n.li,{children:["UMG also exposes event dispatchers directly as ",(0,t.jsx)(n.code,{children:"public"})," ",(0,t.jsx)(n.code,{children:"UPROPERTY"}),", which encourages tighter coupling by directly having enclosing widgets bind to dispatchers on other widgets."]}),"\n",(0,t.jsxs)(n.li,{children:['UMG provides an easy way to model a "has-a" relationship by allowing individual widgets to be composed together as members of larger composite widgets, but does not provide a flexible way to model "is-a". A UMG widget that contains a ',(0,t.jsx)(n.code,{children:"UButton"})," will never ",(0,t.jsx)(n.em,{children:"be"})," a ",(0,t.jsx)(n.code,{children:"UButton"})," in and of itself, requiring the aforementioned violation of encapsulation if an external widget wants to receive notifications about clicks or otherwise configure the behavior of that inner button."]}),"\n",(0,t.jsxs)(n.li,{children:["Outside of the ",(0,t.jsx)(n.code,{children:"UListViewBase"}),"-derived classes, UMG provides no consistent way for data binding to be performed."]}),"\n",(0,t.jsxs)(n.li,{children:["UMG inherits limitations of Blueprint more generally: No native support for ",(0,t.jsx)(n.code,{children:"EditCondition"})," and related metadata on variables without requiring those variables to be declared in C++."]}),"\n",(0,t.jsxs)(n.li,{children:["UMG provides ",(0,t.jsx)(n.code,{children:"BindWidget"})," as a means of allowing C++ base classes to defer to a derived UMG Blueprint for references to inner widgets. However, it has the following limitations:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BindWidget"})," requires the C++ implementation to specify a concrete class for subwidget references to get automatic type checking. This forces a derived implementation to inherit that specific concrete class for the subwidget, preventing reuse of an existing class that doesn't already include that class in its inheritance hierarchy."]}),"\n",(0,t.jsxs)(n.li,{children:["Alternatively, ",(0,t.jsx)(n.code,{children:"BindWidget"})," can be used on a generic ",(0,t.jsx)(n.code,{children:"UWidget "})," property, but then there's no automatic type checking."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BindWidget"})," has no way to specify that the widget should implement a specific interface out-of-the-box."]}),"\n",(0,t.jsxs)(n.li,{children:["There's no way for a Widget Blueprint to indicate that a single internal widget meets the requirements of, and should be bound to, multiple ",(0,t.jsx)(n.code,{children:"BindWidget"})," properties."]}),"\n",(0,t.jsxs)(n.li,{children:["Lastly, and possibly most importantly, ",(0,t.jsx)(n.code,{children:"BindWidget"})," requires each widget to be bound to exist as a direct child of the widget containing the bound reference, and the widget must exist at design time. The widget cannot be instantiated dynamically during initialization and cannot be a sub-widget of an internal widget. For instance, if an outer ",(0,t.jsx)(n.code,{children:"UserWidget"})," tries to bind to a ",(0,t.jsx)(n.code,{children:"UTextBlock"}),", you cannot provide it a reference to an internal button's internal text block."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"principles",children:"Principles"}),"\n",(0,t.jsx)(n.p,{children:"As a result of these limitations, our component UI framework adheres to the following principles:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#prefer-interfaces-over-concrete-types",children:"Prefer interfaces over concrete types"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#provide-consistent-behaviour-for-data-binding",children:"Provide consistent behaviour for data binding"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#emphasise-flexibility-and-composability-for-widgets",children:"Emphasise flexibility and composability for widgets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#dont-include-styling-as-part-of-the-public-interface",children:"Don't include styling as part of the public interface"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#favor-re-usable-widgets-over-bespoke-implementations",children:"Favor re-usable widgets over bespoke implementations"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"prefer-interfaces-over-concrete-types",children:"Prefer interfaces over concrete types"}),"\n",(0,t.jsx)(n.p,{children:"Much of the component UI framework is implemented in terms of interfaces to allow studios to choose how a particular component is implemented."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["By using interfaces, the framework makes no assumptions about whether a component is implemented as a ",(0,t.jsx)(n.code,{children:"Widget"})," or a ",(0,t.jsx)(n.code,{children:"UserWidget"}),", and whether that component is implemented natively or purely via Blueprint or a combination of both."]}),"\n",(0,t.jsxs)(n.li,{children:["The default component implementations provided by mod.io and utilized in the provided Template UI reference their sub-components via interfaces rather than expecting specific concrete types to be provided. For example, the default button expects a widget implementing ",(0,t.jsx)(n.code,{children:"IModioUIHasText"})," rather than requiring a ",(0,t.jsx)(n.code,{children:"UTextBlock"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"The default components and Template UI also use interfaces for event binding. They do not directly bind to event dispatchers, as this enforces a specific concrete type for the target widget."}),"\n",(0,t.jsxs)(n.li,{children:["Default component implementations provided by mod.io have no public functions other than those inherited via ",(0,t.jsx)(n.code,{children:"UWidget"})," or exposed by interfaces. In turn, they never invoke a function on another widget that isn't from those two sources."]}),"\n",(0,t.jsxs)(n.li,{children:["Default component implementations may expose properties for configuration via the details panel by marking those properties as Instance Editable while keeping their access specifier Private. All ",(0,t.jsx)(n.strong,{children:"runtime"})," changes to these configuration variables will be performed via interface/message calls so that widget substitutability is maintained."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"provide-consistent-behaviour-for-data-binding",children:"Provide consistent behaviour for data binding"}),"\n",(0,t.jsx)(n.p,{children:"The mod.io component UI framework is primarily concerned with the visualization of data objects returned from the mod.io REST API via the core plugin. As a result, data binding is particularly important for our widgets, and it is essential that a consistent approach be used throughout the entire framework."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['In order for data binding to be performed consistently across widgets via an interface, mod.io components have the concept of a "data source". These are ',(0,t.jsx)(n.code,{children:"UObject"}),"-derived classes, instances of which can be passed to widgets to allow them to bind to properties of the data contained therein."]}),"\n",(0,t.jsxs)(n.li,{children:["The component UI framework provides helper classes to take the lightweight structs returned by the core plugin and wrap them in ",(0,t.jsx)(n.code,{children:"UObjects"})," that implement the appropriate interfaces."]}),"\n",(0,t.jsx)(n.li,{children:'The component UI framework does not make assumptions about what data an implementation may require in its model. Furthermore, a traditional monolithic data model often has a strong correlation with UI layout. The framework strives to maintain flexibility for consumers by minimizing assumptions about widget hierarchy and layout, so there is no single "model" class containing the backing data. Rather, the data model is distributed through each widget in your implementation, which also allows for the use of individual components outside of a specific hierarchy or layout.'}),"\n",(0,t.jsxs)(n.li,{children:["Data binding in this fashion is essentially a generalization of the approach the engine uses with ",(0,t.jsx)(n.code,{children:"IUserObjectListEntry"}),", but without the assumption that the implementing widget is a ",(0,t.jsx)(n.code,{children:"UserWidget"}),"."]}),"\n",(0,t.jsx)(n.li,{children:'Implementing objects are responsible for "owning" their data source internally to prevent it from being garbage collected.'}),"\n",(0,t.jsxs)(n.li,{children:['A "data source" can be any type of ',(0,t.jsx)(n.code,{children:"UObject"}),", but in practice, the component UI framework often expects the Data Source for a specific component to implement a specific interface so that it can be queried for data to visualize. There are no other requirements on a data source. For instance, if implementors wanted to use a ",(0,t.jsx)(n.code,{children:"UObject"})," that implemented the data interface for a mod and for a user (referencing the mod's author) \u2014 this is supported."]}),"\n",(0,t.jsx)(n.li,{children:"The mod.io UI subsystem emits events by invoking multicast delegates when asynchronous calls that alter the implicit data model have completed. This ensures that individual components do not need to rely on one another to know when this occurs and only receive notifications for data model changes they wish to be informed of."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"---\r\ntitle: Mod Details Data Binding\r\n---\r\nclassDiagram\r\n    namespace Interfaces{\r\n        class IModioUIDataSourceWidget{\r\n            void NativeSetDataSource(UObject* InDataSource) virtual\r\n            UObject* NativeGetDataSource() virtual\r\n        }\r\n        class IModioModInfoUIDetails{\r\n            FModioModInfo GetFullModInfo_Implementation() virtual\r\n            FModioModID GetModID_Implementation() virtual\r\n        }\r\n    }\r\n\r\n    namespace Widgets{\r\n        class UModioUIComponentBase{\r\n            TObjectPtr[UObject] DataSource\r\n            NativeSetDataSource(UObject* InDataSource) override\r\n            UObject* NativeGetDataSource() override\r\n        }\r\n\r\n        class UModioModDetailsDialog{\r\n            NativeSetDataSource(UObject* InDataSource) override\r\n            UObject* NativeGetDataSource() override\r\n        }\r\n    }\r\n\r\n    class UModioModInfoUI{\r\n        <<UObject>>\r\n        FModioModInfo Underlying\r\n        FModioModInfo GetFullModInfo_Implementation() override\r\n        FModioModID GetModID_Implementation() override\r\n    }\r\n\r\n    UModioUIComponentBase --|> IModioUIDataSourceWidget: Implements\r\n    UModioUIComponentBase --* UModioModDetailsDialog: Parent Of\r\n    UModioModInfoUI --|> IModioModInfoUIDetails: Implements\r\n    UModioModDetailsDialog --\x3e UModioModInfoUI: Expects as [DataSource]"}),"\n",(0,t.jsx)(n.h3,{id:"emphasise-flexibility-and-composability-for-widgets",children:"Emphasise flexibility and composability for widgets"}),"\n",(0,t.jsx)(n.p,{children:"While a template design for the component UI framework will be shipped in a future release, the expectation is that many studios will want to build their own layout or incorporate components from the framework into their existing UI implementation, and the default component implementations should avoid making assumptions about how and where they are used. The framework and the default implementations of components in the framework do everything possible to ensure loose coupling between components and between components and their internal subwidgets."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BindWidget"})," is inflexible and enforces specific hierarchical arrangements of widgets because of its requirement that the bound widget be an immediate child of the widget with the associated ",(0,t.jsx)(n.code,{children:"UPROPERTY"}),". As a result, the component UI framework does not use either ",(0,t.jsx)(n.code,{children:"BindWidget"})," or ",(0,t.jsx)(n.code,{children:"BindWidgetOptional"})," anywhere."]}),"\n",(0,t.jsxs)(n.li,{children:["Components in the framework all use getter functions to retrieve references to subwidgets and are tolerant of those references being not provided by an implementation.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A component may either degrade gracefully or simply not function if a sub-widget is not provided, but must not cause crashes as a result."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Widget getter functions all return sub-widgets via ",(0,t.jsx)(n.code,{children:"TScriptInterface"})," to provide as much concept checking as the engine currently permits. Default component implementations should never directly reference sub-widgets via variables."]}),"\n",(0,t.jsxs)(n.li,{children:["Default components are not allowed to make any assumptions about the hierarchy that they are placed in \u2014 they should make no calls to ",(0,t.jsx)(n.code,{children:"GetParent()"})," or rely on being placed in particular slot types."]}),"\n",(0,t.jsxs)(n.li,{children:["Some widgets may need to update their states based on changes made elsewhere within the user interface. These widgets will use the ",(0,t.jsx)(n.code,{children:"ModioUISubsystem"})," to register their interest for specific events occurring rather than relying on parent widgets to notify them."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dont-include-styling-as-part-of-the-public-interface",children:"Don't include styling as part of the public interface"}),"\n",(0,t.jsxs)(n.p,{children:["The component UI framework is intended to allow studios to substitute their own widgets as appropriate in parallel with the above restrictions, component definitions impose minimal requirements about widget styling. Styling and appearance are configured using the instance-editable public ",(0,t.jsx)(n.code,{children:"UPROPERTY"})," of widgets. For runtime changes, where absolutely necessary, interface calls will be performed as a last resort."]}),"\n",(0,t.jsx)(n.h3,{id:"favor-re-usable-widgets-over-bespoke-implementations",children:"Favor re-usable widgets over bespoke implementations"}),"\n",(0,t.jsx)(n.p,{children:"The component UI framework emphasizes generic, repurposable components where possible. Some examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The Object Selector widget is generic and can be used to allow users to make a selection from any collection of ",(0,t.jsx)(n.code,{children:"UObjects"}),". It imposes no requirements on the type of ",(0,t.jsx)(n.code,{children:"UObject"})," that it is presenting to the user for selection."]}),"\n",(0,t.jsxs)(n.li,{children:["The Enum Selector widget also models the Object Selector concept. The default implementation defers to an internal Object Selector for the majority of its functionality by requiring that the objects provided to the selector implement the ",(0,t.jsx)(n.code,{children:"IModioEnumEntryUIDetails"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsxs)(n.p,{children:["Now that you understand the core principles of Component UI, it's time to use simple components to ",(0,t.jsx)(n.a,{href:"/unreal/component-ui/building-a-screen/",children:"Build a UGC Browser"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);